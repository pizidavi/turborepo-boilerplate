/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as AuthenticatedRouteImport } from './routes/_authenticated';
import { Route as AuthRouteImport } from './routes/_auth';
import { Route as IndexRouteImport } from './routes/index';
import { Route as AuthRegisterRouteImport } from './routes/_auth/register';
import { Route as AuthLoginRouteImport } from './routes/_auth/login';
import { Route as AuthenticatedDashboardIndexRouteImport } from './routes/_authenticated/dashboard/index';
import { Route as AuthenticatedDashboardTodosIndexRouteImport } from './routes/_authenticated/dashboard/todos/index';
import { Route as AuthenticatedDashboardTodosNewRouteImport } from './routes/_authenticated/dashboard/todos/new';

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any);
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any);
const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => AuthenticatedRoute,
  } as any);
const AuthenticatedDashboardTodosIndexRoute =
  AuthenticatedDashboardTodosIndexRouteImport.update({
    id: '/dashboard/todos/',
    path: '/dashboard/todos/',
    getParentRoute: () => AuthenticatedRoute,
  } as any);
const AuthenticatedDashboardTodosNewRoute =
  AuthenticatedDashboardTodosNewRouteImport.update({
    id: '/dashboard/todos/new',
    path: '/dashboard/todos/new',
    getParentRoute: () => AuthenticatedRoute,
  } as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/dashboard': typeof AuthenticatedDashboardIndexRoute;
  '/dashboard/todos/new': typeof AuthenticatedDashboardTodosNewRoute;
  '/dashboard/todos': typeof AuthenticatedDashboardTodosIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/login': typeof AuthLoginRoute;
  '/register': typeof AuthRegisterRoute;
  '/dashboard': typeof AuthenticatedDashboardIndexRoute;
  '/dashboard/todos/new': typeof AuthenticatedDashboardTodosNewRoute;
  '/dashboard/todos': typeof AuthenticatedDashboardTodosIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/_authenticated': typeof AuthenticatedRouteWithChildren;
  '/_auth/login': typeof AuthLoginRoute;
  '/_auth/register': typeof AuthRegisterRoute;
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute;
  '/_authenticated/dashboard/todos/new': typeof AuthenticatedDashboardTodosNewRoute;
  '/_authenticated/dashboard/todos/': typeof AuthenticatedDashboardTodosIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/dashboard/todos/new'
    | '/dashboard/todos';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/dashboard/todos/new'
    | '/dashboard/todos';
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_authenticated'
    | '/_auth/login'
    | '/_auth/register'
    | '/_authenticated/dashboard/'
    | '/_authenticated/dashboard/todos/new'
    | '/_authenticated/dashboard/todos/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthenticatedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_auth/register': {
      id: '/_auth/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof AuthRegisterRouteImport;
      parentRoute: typeof AuthRoute;
    };
    '/_auth/login': {
      id: '/_auth/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof AuthLoginRouteImport;
      parentRoute: typeof AuthRoute;
    };
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof AuthenticatedDashboardIndexRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
    '/_authenticated/dashboard/todos/': {
      id: '/_authenticated/dashboard/todos/';
      path: '/dashboard/todos';
      fullPath: '/dashboard/todos';
      preLoaderRoute: typeof AuthenticatedDashboardTodosIndexRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
    '/_authenticated/dashboard/todos/new': {
      id: '/_authenticated/dashboard/todos/new';
      path: '/dashboard/todos/new';
      fullPath: '/dashboard/todos/new';
      preLoaderRoute: typeof AuthenticatedDashboardTodosNewRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
  }
}

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthRegisterRoute: typeof AuthRegisterRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute;
  AuthenticatedDashboardTodosNewRoute: typeof AuthenticatedDashboardTodosNewRoute;
  AuthenticatedDashboardTodosIndexRoute: typeof AuthenticatedDashboardTodosIndexRoute;
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  AuthenticatedDashboardTodosNewRoute: AuthenticatedDashboardTodosNewRoute,
  AuthenticatedDashboardTodosIndexRoute: AuthenticatedDashboardTodosIndexRoute,
};

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
